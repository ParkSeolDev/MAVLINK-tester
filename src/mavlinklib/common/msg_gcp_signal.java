/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

package tcpserver.src.mavlinklib.common;
import tcpserver.src.mavlinklib.MAVLinkPacket;
import tcpserver.src.mavlinklib.Messages.MAVLinkMessage;
import tcpserver.src.mavlinklib.Messages.MAVLinkPayload;

/**
 * DROW GCP_SIGNAL MESSAGE
 */
public class msg_gcp_signal extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_GCP_SIGNAL = 3002;
    public static final int MAVLINK_MSG_ID_GCP_SIGNAL_CRC = 234; // 211
    public static final int MAVLINK_MSG_LENGTH = 1226;
    private static final long serialVersionUID = MAVLINK_MSG_ID_GCP_SIGNAL;

    
    /**
     * Timestamp (Source Time).
     */
    public long time_boot_ms;
    
    /**
     * signal value
     */
    public float signal_value;
    
    /**
     * signal data
     */
    public float signal_data[] = new float[200];
    
    /**
     * controlType to control mission
     */
    public int control_type;
    
    /**
     * signal key
     */
    public byte signal_key[] = new byte[16];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
//        packet.sysid = sysid;
//        packet.compid = compid;
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_GCP_SIGNAL;
        packet.crc_extra = MAVLINK_MSG_ID_GCP_SIGNAL_CRC;

        packet.payload.putUnsignedInt(time_boot_ms);
        packet.payload.putFloat(signal_value);
        
        for (int i = 0; i < signal_data.length; i++) {
            packet.payload.putFloat(signal_data[i]);
        }
                    
        packet.payload.putUnsignedShort(control_type);
        
        for (int i = 0; i < signal_key.length; i++) {
            packet.payload.putByte(signal_key[i]);
        }
                    
        
//        if (isMavlink2) {
//            
//        }
        return packet;
    }

    /**
     * Decode a gcp_signal message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.time_boot_ms = payload.getUnsignedInt();
        this.signal_value = payload.getFloat();
        
        for (int i = 0; i < this.signal_data.length; i++) {
            this.signal_data[i] = payload.getFloat();
        }
                
        this.control_type = payload.getUnsignedShort();
        
        for (int i = 0; i < this.signal_key.length; i++) {
            this.signal_key[i] = payload.getByte();
        }
                
        
//        if (isMavlink2) {
//            
//        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_gcp_signal() {
        this.msgid = MAVLINK_MSG_ID_GCP_SIGNAL;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_gcp_signal( long time_boot_ms, float signal_value, float[] signal_data, int control_type, byte[] signal_key) {
        this.msgid = MAVLINK_MSG_ID_GCP_SIGNAL;

        this.time_boot_ms = time_boot_ms;
        this.signal_value = signal_value;
        this.signal_data = signal_data;
        this.control_type = control_type;
        this.signal_key = signal_key;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_gcp_signal( long time_boot_ms, float signal_value, float[] signal_data, int control_type, byte[] signal_key, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_GCP_SIGNAL;
        this.sysid = sysid;
        this.compid = compid;

        this.time_boot_ms = time_boot_ms;
        this.signal_value = signal_value;
        this.signal_data = signal_data;
        this.control_type = control_type;
        this.signal_key = signal_key;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_gcp_signal(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_GCP_SIGNAL;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        unpack(mavLinkPacket.payload);
    }

             
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setSignal_Key(String str) {
        int len = Math.min(str.length(), 16);
        for (int i=0; i<len; i++) {
            signal_key[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<16; i++) {            // padding for the rest of the buffer
            signal_key[i] = 0;
        }
    }

    /**
    * Gets the message, formatted as a string
    */
    public String getSignal_Key() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 16; i++) {
            if (signal_key[i] != 0)
                buf.append((char) signal_key[i]);
            else
                break;
        }
        return buf.toString();

    }
                         
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_GCP_SIGNAL - sysid:"+sysid+" compid:"+compid+" time_boot_ms:"+time_boot_ms+" signal_value:"+signal_value+" signal_data:"+signal_data+" control_type:"+control_type+" signal_key:"+signal_key+"";
    }

}        