/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE AMP_PARTS PACKING
package tcpserver.src.mavlinklib.ardupilotmega;

import jdk.jfr.Description;
import tcpserver.src.mavlinklib.MAVLinkPacket;
import tcpserver.src.mavlinklib.Messages.MAVLinkMessage;
import tcpserver.src.mavlinklib.Messages.MAVLinkPayload;

/**
 * Weather information including fine dust and radition measuring information
 */
public class msg_amp_parts extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_AMP_PARTS = 12926;
    public static final int MAVLINK_MSG_ID_AMP_PARTS_CRC = 188;
    public static final int MAVLINK_MSG_LENGTH = 34;
    private static final long serialVersionUID = MAVLINK_MSG_ID_AMP_PARTS;

    
    /**
     * Latitude
     */
    @Description("Latitude")
    public int lat; // degE7
    
    /**
     * Longitude
     */
    @Description("Longitude")
    public int lon; // degE7
    
    /**
     * Altitude
     */
    @Description("Altitude")
//    @Units("mm")
    public int alt;
    
    /**
     * Windspeed
     */
    @Description("Windspeed")
//    @Units("deg")
    public int pm1p0;
    
    /**
     * Windspeed
     */
    @Description("Windspeed")
//    @Units("deg")
    public int pm2p5;
    
    /**
     * Windspeed
     */
    @Description("Windspeed")
//    @Units("deg")
    public int pm10;
    
    /**
     * Temperature
     */
    @Description("Temperature")
//    @Units("cdegC")
    public short temperature;
    
    /**
     * Humidity
     */
    @Description("Humidity")
//    @Units("c%")
    public int humidity;
    
    /**
     * Absolute pressure
     */
    @Description("Absolute pressure")
//    @Units("hPa")
    public short pressure;
    
    /**
     * Windspeed
     */
    @Description("Windspeed")
//    @Units("dm/s")
    public int windspeed;
    
    /**
     * Wind heading
     */
    @Description("Wind heading")
//    @Units("deg")
    public int wind_heading;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_AMP_PARTS;
        packet.crc_extra = MAVLINK_MSG_ID_AMP_PARTS_CRC;

        packet.payload.putInt(lat);
        packet.payload.putInt(lon);
        packet.payload.putInt(alt);
        packet.payload.putInt(pm1p0);
        packet.payload.putInt(pm2p5);
        packet.payload.putInt(pm10);
        packet.payload.putShort(temperature);
        packet.payload.putUnsignedShort(humidity);
        packet.payload.putShort(pressure);
        packet.payload.putUnsignedShort(windspeed);
        packet.payload.putUnsignedShort(wind_heading);
        
        return packet;
    }

    /**
     * Decode a amp_parts message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.lat = payload.getInt();
        this.lon = payload.getInt();
        this.alt = payload.getInt();
        this.pm1p0 = payload.getInt();
        this.pm2p5 = payload.getInt();
        this.pm10 = payload.getInt();
        this.temperature = payload.getShort();
        this.humidity = payload.getUnsignedShort();
        this.pressure = payload.getShort();
        this.windspeed = payload.getUnsignedShort();
        this.wind_heading = payload.getUnsignedShort();
        
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_amp_parts() {
        this.msgid = MAVLINK_MSG_ID_AMP_PARTS;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_amp_parts( int lat, int lon, int alt, int pm1p0, int pm2p5, int pm10, short temperature, int humidity, short pressure, int windspeed, int wind_heading) {
        this.msgid = MAVLINK_MSG_ID_AMP_PARTS;

        this.lat = lat;
        this.lon = lon;
        this.alt = alt;
        this.pm1p0 = pm1p0;
        this.pm2p5 = pm2p5;
        this.pm10 = pm10;
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
        this.windspeed = windspeed;
        this.wind_heading = wind_heading;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_amp_parts( int lat, int lon, int alt, int pm1p0, int pm2p5, int pm10, short temperature, int humidity, short pressure, int windspeed, int wind_heading, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_AMP_PARTS;
        this.sysid = sysid;
        this.compid = compid;

        this.lat = lat;
        this.lon = lon;
        this.alt = alt;
        this.pm1p0 = pm1p0;
        this.pm2p5 = pm2p5;
        this.pm10 = pm10;
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
        this.windspeed = windspeed;
        this.wind_heading = wind_heading;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_amp_parts(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_AMP_PARTS;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        unpack(mavLinkPacket.payload);
    }

                          
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_AMP_PARTS - sysid:"+sysid+" compid:"+compid+" lat:"+lat+" lon:"+lon+" alt:"+alt+" pm1p0:"+pm1p0+" pm2p5:"+pm2p5+" pm10:"+pm10+" temperature:"+temperature+" humidity:"+humidity+" pressure:"+pressure+" windspeed:"+windspeed+" wind_heading:"+wind_heading+"";
    }

}
        